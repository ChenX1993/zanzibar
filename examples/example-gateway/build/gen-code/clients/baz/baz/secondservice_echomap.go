// Code generated by thriftrw v1.3.0
// @generated

package baz

import (
	"errors"
	"fmt"
	"github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/base"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type SecondService_EchoMap_Args struct {
	Arg map[base.UUID]string `json:"arg,required"`
}

type _Map_UUID_String_MapItemList map[base.UUID]string

func (m _Map_UUID_String_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		kw, err := k.ToWire()
		if err != nil {
			return err
		}
		vw, err := wire.NewValueString(v), error(nil)
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_UUID_String_MapItemList) Size() int {
	return len(m)
}

func (_Map_UUID_String_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_UUID_String_MapItemList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Map_UUID_String_MapItemList) Close() {
}

func (v *SecondService_EchoMap_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Arg == nil {
		return w, errors.New("field Arg of SecondService_EchoMap_Args is required")
	}
	w, err = wire.NewValueMap(_Map_UUID_String_MapItemList(v.Arg)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _UUID_Read(w wire.Value) (base.UUID, error) {
	var x base.UUID
	err := x.FromWire(w)
	return x, err
}

func _Map_UUID_String_Read(m wire.MapItemList) (map[base.UUID]string, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}
	if m.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make(map[base.UUID]string, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := _UUID_Read(x.Key)
		if err != nil {
			return err
		}
		v, err := x.Value.GetString(), error(nil)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func (v *SecondService_EchoMap_Args) FromWire(w wire.Value) error {
	var err error
	argIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.Arg, err = _Map_UUID_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}
	if !argIsSet {
		return errors.New("field Arg of SecondService_EchoMap_Args is required")
	}
	return nil
}

func (v *SecondService_EchoMap_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++
	return fmt.Sprintf("SecondService_EchoMap_Args{%v}", strings.Join(fields[:i], ", "))
}

func _Map_UUID_String_Equals(lhs, rhs map[base.UUID]string) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !(lv == rv) {
			return false
		}
	}
	return true
}

func (v *SecondService_EchoMap_Args) Equals(rhs *SecondService_EchoMap_Args) bool {
	if !_Map_UUID_String_Equals(v.Arg, rhs.Arg) {
		return false
	}
	return true
}

func (v *SecondService_EchoMap_Args) MethodName() string {
	return "EchoMap"
}

func (v *SecondService_EchoMap_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var SecondService_EchoMap_Helper = struct {
	Args           func(arg map[base.UUID]string) *SecondService_EchoMap_Args
	IsException    func(error) bool
	WrapResponse   func(map[base.UUID]*base.BazResponse, error) (*SecondService_EchoMap_Result, error)
	UnwrapResponse func(*SecondService_EchoMap_Result) (map[base.UUID]*base.BazResponse, error)
}{}

func init() {
	SecondService_EchoMap_Helper.Args = func(arg map[base.UUID]string) *SecondService_EchoMap_Args {
		return &SecondService_EchoMap_Args{Arg: arg}
	}
	SecondService_EchoMap_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	SecondService_EchoMap_Helper.WrapResponse = func(success map[base.UUID]*base.BazResponse, err error) (*SecondService_EchoMap_Result, error) {
		if err == nil {
			return &SecondService_EchoMap_Result{Success: success}, nil
		}
		return nil, err
	}
	SecondService_EchoMap_Helper.UnwrapResponse = func(result *SecondService_EchoMap_Result) (success map[base.UUID]*base.BazResponse, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type SecondService_EchoMap_Result struct {
	Success map[base.UUID]*base.BazResponse `json:"success"`
}

type _Map_UUID_BazResponse_MapItemList map[base.UUID]*base.BazResponse

func (m _Map_UUID_BazResponse_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		if v == nil {
			return fmt.Errorf("invalid [%v]: value is nil", k)
		}
		kw, err := k.ToWire()
		if err != nil {
			return err
		}
		vw, err := v.ToWire()
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_UUID_BazResponse_MapItemList) Size() int {
	return len(m)
}

func (_Map_UUID_BazResponse_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_UUID_BazResponse_MapItemList) ValueType() wire.Type {
	return wire.TStruct
}

func (_Map_UUID_BazResponse_MapItemList) Close() {
}

func (v *SecondService_EchoMap_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = wire.NewValueMap(_Map_UUID_BazResponse_MapItemList(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("SecondService_EchoMap_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _BazResponse_Read(w wire.Value) (*base.BazResponse, error) {
	var v base.BazResponse
	err := v.FromWire(w)
	return &v, err
}

func _Map_UUID_BazResponse_Read(m wire.MapItemList) (map[base.UUID]*base.BazResponse, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}
	if m.ValueType() != wire.TStruct {
		return nil, nil
	}
	o := make(map[base.UUID]*base.BazResponse, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := _UUID_Read(x.Key)
		if err != nil {
			return err
		}
		v, err := _BazResponse_Read(x.Value)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

func (v *SecondService_EchoMap_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TMap {
				v.Success, err = _Map_UUID_BazResponse_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("SecondService_EchoMap_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *SecondService_EchoMap_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("SecondService_EchoMap_Result{%v}", strings.Join(fields[:i], ", "))
}

func _Map_UUID_BazResponse_Equals(lhs, rhs map[base.UUID]*base.BazResponse) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !lv.Equals(rv) {
			return false
		}
	}
	return true
}

func (v *SecondService_EchoMap_Result) Equals(rhs *SecondService_EchoMap_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && _Map_UUID_BazResponse_Equals(v.Success, rhs.Success))) {
		return false
	}
	return true
}

func (v *SecondService_EchoMap_Result) MethodName() string {
	return "EchoMap"
}

func (v *SecondService_EchoMap_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
