// Code generated by thriftrw v1.3.0
// @generated

package baz

import (
	"errors"
	"fmt"
	"github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/base"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type SecondService_EchoUUIDList_Args struct {
	Arg []base.UUID `json:"arg,required"`
}

type _List_UUID_ValueList []base.UUID

func (v _List_UUID_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_UUID_ValueList) Size() int {
	return len(v)
}

func (_List_UUID_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_UUID_ValueList) Close() {
}

func (v *SecondService_EchoUUIDList_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Arg == nil {
		return w, errors.New("field Arg of SecondService_EchoUUIDList_Args is required")
	}
	w, err = wire.NewValueList(_List_UUID_ValueList(v.Arg)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_UUID_Read(l wire.ValueList) ([]base.UUID, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}
	o := make([]base.UUID, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _UUID_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func (v *SecondService_EchoUUIDList_Args) FromWire(w wire.Value) error {
	var err error
	argIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Arg, err = _List_UUID_Read(field.Value.GetList())
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}
	if !argIsSet {
		return errors.New("field Arg of SecondService_EchoUUIDList_Args is required")
	}
	return nil
}

func (v *SecondService_EchoUUIDList_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++
	return fmt.Sprintf("SecondService_EchoUUIDList_Args{%v}", strings.Join(fields[:i], ", "))
}

func _List_UUID_Equals(lhs, rhs []base.UUID) bool {
	if len(lhs) != len(rhs) {
		return false
	}
	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}
	return true
}

func (v *SecondService_EchoUUIDList_Args) Equals(rhs *SecondService_EchoUUIDList_Args) bool {
	if !_List_UUID_Equals(v.Arg, rhs.Arg) {
		return false
	}
	return true
}

func (v *SecondService_EchoUUIDList_Args) MethodName() string {
	return "EchoUUIDList"
}

func (v *SecondService_EchoUUIDList_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var SecondService_EchoUUIDList_Helper = struct {
	Args           func(arg []base.UUID) *SecondService_EchoUUIDList_Args
	IsException    func(error) bool
	WrapResponse   func([]base.UUID, error) (*SecondService_EchoUUIDList_Result, error)
	UnwrapResponse func(*SecondService_EchoUUIDList_Result) ([]base.UUID, error)
}{}

func init() {
	SecondService_EchoUUIDList_Helper.Args = func(arg []base.UUID) *SecondService_EchoUUIDList_Args {
		return &SecondService_EchoUUIDList_Args{Arg: arg}
	}
	SecondService_EchoUUIDList_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	SecondService_EchoUUIDList_Helper.WrapResponse = func(success []base.UUID, err error) (*SecondService_EchoUUIDList_Result, error) {
		if err == nil {
			return &SecondService_EchoUUIDList_Result{Success: success}, nil
		}
		return nil, err
	}
	SecondService_EchoUUIDList_Helper.UnwrapResponse = func(result *SecondService_EchoUUIDList_Result) (success []base.UUID, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type SecondService_EchoUUIDList_Result struct {
	Success []base.UUID `json:"success"`
}

func (v *SecondService_EchoUUIDList_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = wire.NewValueList(_List_UUID_ValueList(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("SecondService_EchoUUIDList_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SecondService_EchoUUIDList_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TList {
				v.Success, err = _List_UUID_Read(field.Value.GetList())
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("SecondService_EchoUUIDList_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *SecondService_EchoUUIDList_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("SecondService_EchoUUIDList_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *SecondService_EchoUUIDList_Result) Equals(rhs *SecondService_EchoUUIDList_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && _List_UUID_Equals(v.Success, rhs.Success))) {
		return false
	}
	return true
}

func (v *SecondService_EchoUUIDList_Result) MethodName() string {
	return "EchoUUIDList"
}

func (v *SecondService_EchoUUIDList_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
