// Code generated by thriftrw v1.12.0. DO NOT EDIT.
// @generated

package apprentice

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

// Apprentice_GetResponse_Args represents the arguments for the Apprentice.getResponse function.
//
// The arguments for getResponse are sent and received over the wire as this struct.
type Apprentice_GetResponse_Args struct {
	TraceID           string  `json:"traceID,required"`
	ClientServiceName *string `json:"clientServiceName,omitempty"`
	ClientMethod      *string `json:"clientMethod,omitempty"`
}

// ToWire translates a Apprentice_GetResponse_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Apprentice_GetResponse_Args) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.TraceID), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.ClientServiceName != nil {
		w, err = wire.NewValueString(*(v.ClientServiceName)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.ClientMethod != nil {
		w, err = wire.NewValueString(*(v.ClientMethod)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Apprentice_GetResponse_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Apprentice_GetResponse_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Apprentice_GetResponse_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Apprentice_GetResponse_Args) FromWire(w wire.Value) error {
	var err error

	traceIDIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.TraceID, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				traceIDIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ClientServiceName = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.ClientMethod = &x
				if err != nil {
					return err
				}

			}
		}
	}

	if !traceIDIsSet {
		return errors.New("field TraceID of Apprentice_GetResponse_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Apprentice_GetResponse_Args
// struct.
func (v *Apprentice_GetResponse_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("TraceID: %v", v.TraceID)
	i++
	if v.ClientServiceName != nil {
		fields[i] = fmt.Sprintf("ClientServiceName: %v", *(v.ClientServiceName))
		i++
	}
	if v.ClientMethod != nil {
		fields[i] = fmt.Sprintf("ClientMethod: %v", *(v.ClientMethod))
		i++
	}

	return fmt.Sprintf("Apprentice_GetResponse_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Apprentice_GetResponse_Args match the
// provided Apprentice_GetResponse_Args.
//
// This function performs a deep comparison.
func (v *Apprentice_GetResponse_Args) Equals(rhs *Apprentice_GetResponse_Args) bool {
	if !(v.TraceID == rhs.TraceID) {
		return false
	}
	if !_String_EqualsPtr(v.ClientServiceName, rhs.ClientServiceName) {
		return false
	}
	if !_String_EqualsPtr(v.ClientMethod, rhs.ClientMethod) {
		return false
	}

	return true
}

// GetTraceID returns the value of TraceID if it is set or its
// zero value if it is unset.
func (v *Apprentice_GetResponse_Args) GetTraceID() (o string) { return v.TraceID }

// GetClientServiceName returns the value of ClientServiceName if it is set or its
// zero value if it is unset.
func (v *Apprentice_GetResponse_Args) GetClientServiceName() (o string) {
	if v.ClientServiceName != nil {
		return *v.ClientServiceName
	}

	return
}

// GetClientMethod returns the value of ClientMethod if it is set or its
// zero value if it is unset.
func (v *Apprentice_GetResponse_Args) GetClientMethod() (o string) {
	if v.ClientMethod != nil {
		return *v.ClientMethod
	}

	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getResponse" for this struct.
func (v *Apprentice_GetResponse_Args) MethodName() string {
	return "getResponse"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Apprentice_GetResponse_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Apprentice_GetResponse_Helper provides functions that aid in handling the
// parameters and return values of the Apprentice.getResponse
// function.
var Apprentice_GetResponse_Helper = struct {
	// Args accepts the parameters of getResponse in-order and returns
	// the arguments struct for the function.
	Args func(
		traceID string,
		clientServiceName *string,
		clientMethod *string,
	) *Apprentice_GetResponse_Args

	// IsException returns true if the given error can be thrown
	// by getResponse.
	//
	// An error can be thrown by getResponse only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getResponse
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getResponse into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getResponse
	//
	//   value, err := getResponse(args)
	//   result, err := Apprentice_GetResponse_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getResponse: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(string, error) (*Apprentice_GetResponse_Result, error)

	// UnwrapResponse takes the result struct for getResponse
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getResponse threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Apprentice_GetResponse_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Apprentice_GetResponse_Result) (string, error)
}{}

func init() {
	Apprentice_GetResponse_Helper.Args = func(
		traceID string,
		clientServiceName *string,
		clientMethod *string,
	) *Apprentice_GetResponse_Args {
		return &Apprentice_GetResponse_Args{
			TraceID:           traceID,
			ClientServiceName: clientServiceName,
			ClientMethod:      clientMethod,
		}
	}

	Apprentice_GetResponse_Helper.IsException = func(err error) bool {
		switch err.(type) {
		case *OperationError:
			return true
		default:
			return false
		}
	}

	Apprentice_GetResponse_Helper.WrapResponse = func(success string, err error) (*Apprentice_GetResponse_Result, error) {
		if err == nil {
			return &Apprentice_GetResponse_Result{Success: &success}, nil
		}

		switch e := err.(type) {
		case *OperationError:
			if e == nil {
				return nil, errors.New("WrapResponse received non-nil error type with nil value for Apprentice_GetResponse_Result.Err")
			}
			return &Apprentice_GetResponse_Result{Err: e}, nil
		}

		return nil, err
	}
	Apprentice_GetResponse_Helper.UnwrapResponse = func(result *Apprentice_GetResponse_Result) (success string, err error) {
		if result.Err != nil {
			err = result.Err
			return
		}

		if result.Success != nil {
			success = *result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Apprentice_GetResponse_Result represents the result of a Apprentice.getResponse function call.
//
// The result of a getResponse execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Apprentice_GetResponse_Result struct {
	// Value returned by getResponse after a successful execution.
	Success *string         `json:"success,omitempty"`
	Err     *OperationError `json:"err,omitempty"`
}

// ToWire translates a Apprentice_GetResponse_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Apprentice_GetResponse_Result) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = wire.NewValueString(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if v.Err != nil {
		w, err = v.Err.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Apprentice_GetResponse_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Apprentice_GetResponse_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Apprentice_GetResponse_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Apprentice_GetResponse_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Apprentice_GetResponse_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}

			}
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Err, err = _OperationError_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if v.Err != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Apprentice_GetResponse_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Apprentice_GetResponse_Result
// struct.
func (v *Apprentice_GetResponse_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}
	if v.Err != nil {
		fields[i] = fmt.Sprintf("Err: %v", v.Err)
		i++
	}

	return fmt.Sprintf("Apprentice_GetResponse_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Apprentice_GetResponse_Result match the
// provided Apprentice_GetResponse_Result.
//
// This function performs a deep comparison.
func (v *Apprentice_GetResponse_Result) Equals(rhs *Apprentice_GetResponse_Result) bool {
	if !_String_EqualsPtr(v.Success, rhs.Success) {
		return false
	}
	if !((v.Err == nil && rhs.Err == nil) || (v.Err != nil && rhs.Err != nil && v.Err.Equals(rhs.Err))) {
		return false
	}

	return true
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Apprentice_GetResponse_Result) GetSuccess() (o string) {
	if v.Success != nil {
		return *v.Success
	}

	return
}

// GetErr returns the value of Err if it is set or its
// zero value if it is unset.
func (v *Apprentice_GetResponse_Result) GetErr() (o *OperationError) {
	if v.Err != nil {
		return v.Err
	}

	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getResponse" for this struct.
func (v *Apprentice_GetResponse_Result) MethodName() string {
	return "getResponse"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Apprentice_GetResponse_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
