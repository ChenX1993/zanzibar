// Code generated by thriftrw v1.3.0
// @generated

package bar

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type Echo_EchoI8_Args struct {
	Arg int8 `json:"arg,required"`
}

func (v *Echo_EchoI8_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueI8(v.Arg), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Echo_EchoI8_Args) FromWire(w wire.Value) error {
	var err error
	argIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI8 {
				v.Arg, err = field.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
				argIsSet = true
			}
		}
	}
	if !argIsSet {
		return errors.New("field Arg of Echo_EchoI8_Args is required")
	}
	return nil
}

func (v *Echo_EchoI8_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Arg: %v", v.Arg)
	i++
	return fmt.Sprintf("Echo_EchoI8_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *Echo_EchoI8_Args) Equals(rhs *Echo_EchoI8_Args) bool {
	if !(v.Arg == rhs.Arg) {
		return false
	}
	return true
}

func (v *Echo_EchoI8_Args) MethodName() string {
	return "echoI8"
}

func (v *Echo_EchoI8_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var Echo_EchoI8_Helper = struct {
	Args           func(arg int8) *Echo_EchoI8_Args
	IsException    func(error) bool
	WrapResponse   func(int8, error) (*Echo_EchoI8_Result, error)
	UnwrapResponse func(*Echo_EchoI8_Result) (int8, error)
}{}

func init() {
	Echo_EchoI8_Helper.Args = func(arg int8) *Echo_EchoI8_Args {
		return &Echo_EchoI8_Args{Arg: arg}
	}
	Echo_EchoI8_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	Echo_EchoI8_Helper.WrapResponse = func(success int8, err error) (*Echo_EchoI8_Result, error) {
		if err == nil {
			return &Echo_EchoI8_Result{Success: &success}, nil
		}
		return nil, err
	}
	Echo_EchoI8_Helper.UnwrapResponse = func(result *Echo_EchoI8_Result) (success int8, err error) {
		if result.Success != nil {
			success = *result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type Echo_EchoI8_Result struct {
	Success *int8 `json:"success,omitempty"`
}

func (v *Echo_EchoI8_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = wire.NewValueI8(*(v.Success)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("Echo_EchoI8_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Echo_EchoI8_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TI8 {
				var x int8
				x, err = field.Value.GetI8(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Echo_EchoI8_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *Echo_EchoI8_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}
	return fmt.Sprintf("Echo_EchoI8_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *Echo_EchoI8_Result) Equals(rhs *Echo_EchoI8_Result) bool {
	if !_Byte_EqualsPtr(v.Success, rhs.Success) {
		return false
	}
	return true
}

func (v *Echo_EchoI8_Result) MethodName() string {
	return "echoI8"
}

func (v *Echo_EchoI8_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
