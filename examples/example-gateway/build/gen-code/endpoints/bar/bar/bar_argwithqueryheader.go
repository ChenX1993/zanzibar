// Code generated by thriftrw v1.6.0. DO NOT EDIT.
// @generated

package bar

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type Bar_ArgWithQueryHeader_Args struct {
	UserUUID *string `json:"userUUID,omitempty"`
}

func (v *Bar_ArgWithQueryHeader_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.UserUUID != nil {
		w, err = wire.NewValueString(*(v.UserUUID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Bar_ArgWithQueryHeader_Args) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.UserUUID = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Bar_ArgWithQueryHeader_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.UserUUID != nil {
		fields[i] = fmt.Sprintf("UserUUID: %v", *(v.UserUUID))
		i++
	}
	return fmt.Sprintf("Bar_ArgWithQueryHeader_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *Bar_ArgWithQueryHeader_Args) Equals(rhs *Bar_ArgWithQueryHeader_Args) bool {
	if !_String_EqualsPtr(v.UserUUID, rhs.UserUUID) {
		return false
	}
	return true
}

func (v *Bar_ArgWithQueryHeader_Args) GetUserUUID() (o string) {
	if v.UserUUID != nil {
		return *v.UserUUID
	}
	return
}

func (v *Bar_ArgWithQueryHeader_Args) MethodName() string {
	return "argWithQueryHeader"
}

func (v *Bar_ArgWithQueryHeader_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var Bar_ArgWithQueryHeader_Helper = struct {
	Args           func(userUUID *string) *Bar_ArgWithQueryHeader_Args
	IsException    func(error) bool
	WrapResponse   func(*BarResponse, error) (*Bar_ArgWithQueryHeader_Result, error)
	UnwrapResponse func(*Bar_ArgWithQueryHeader_Result) (*BarResponse, error)
}{}

func init() {
	Bar_ArgWithQueryHeader_Helper.Args = func(userUUID *string) *Bar_ArgWithQueryHeader_Args {
		return &Bar_ArgWithQueryHeader_Args{UserUUID: userUUID}
	}
	Bar_ArgWithQueryHeader_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	Bar_ArgWithQueryHeader_Helper.WrapResponse = func(success *BarResponse, err error) (*Bar_ArgWithQueryHeader_Result, error) {
		if err == nil {
			return &Bar_ArgWithQueryHeader_Result{Success: success}, nil
		}
		return nil, err
	}
	Bar_ArgWithQueryHeader_Helper.UnwrapResponse = func(result *Bar_ArgWithQueryHeader_Result) (success *BarResponse, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}

type Bar_ArgWithQueryHeader_Result struct {
	Success *BarResponse `json:"success,omitempty"`
}

func (v *Bar_ArgWithQueryHeader_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("Bar_ArgWithQueryHeader_Result should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Bar_ArgWithQueryHeader_Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _BarResponse_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Bar_ArgWithQueryHeader_Result should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *Bar_ArgWithQueryHeader_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("Bar_ArgWithQueryHeader_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *Bar_ArgWithQueryHeader_Result) Equals(rhs *Bar_ArgWithQueryHeader_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}
	return true
}

func (v *Bar_ArgWithQueryHeader_Result) MethodName() string {
	return "argWithQueryHeader"
}

func (v *Bar_ArgWithQueryHeader_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
