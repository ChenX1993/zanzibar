// Code generated by zanzibar
// @generated

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package bazClient is generated code used to make or handle TChannel calls using Thrift.
package bazClient

import (
	"context"
	"errors"

	"github.com/uber/zanzibar/runtime"
	"go.uber.org/thriftrw/wire"

	clientsBazBase "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/base"
	clientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
)

// SecondServiceEchoBinaryFunc is the handler function for "EchoBinary" method of thrift service "SecondService".
type SecondServiceEchoBinaryFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoBinary_Args,
) ([]byte, map[string]string, error)

// NewSecondServiceEchoBinaryHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoBinaryHandler(f SecondServiceEchoBinaryFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoBinaryHandler{f}
}

// SecondServiceEchoBinaryHandler handles the "EchoBinary" method call of thrift service "SecondService".
type SecondServiceEchoBinaryHandler struct {
	echobinary SecondServiceEchoBinaryFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoBinaryHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoBinary_Args
	var res clientsBazBaz.SecondService_EchoBinary_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echobinary(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoBoolFunc is the handler function for "EchoBool" method of thrift service "SecondService".
type SecondServiceEchoBoolFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoBool_Args,
) (bool, map[string]string, error)

// NewSecondServiceEchoBoolHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoBoolHandler(f SecondServiceEchoBoolFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoBoolHandler{f}
}

// SecondServiceEchoBoolHandler handles the "EchoBool" method call of thrift service "SecondService".
type SecondServiceEchoBoolHandler struct {
	echobool SecondServiceEchoBoolFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoBoolHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoBool_Args
	var res clientsBazBaz.SecondService_EchoBool_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echobool(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoDoubleFunc is the handler function for "EchoDouble" method of thrift service "SecondService".
type SecondServiceEchoDoubleFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoDouble_Args,
) (float64, map[string]string, error)

// NewSecondServiceEchoDoubleHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoDoubleHandler(f SecondServiceEchoDoubleFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoDoubleHandler{f}
}

// SecondServiceEchoDoubleHandler handles the "EchoDouble" method call of thrift service "SecondService".
type SecondServiceEchoDoubleHandler struct {
	echodouble SecondServiceEchoDoubleFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoDoubleHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoDouble_Args
	var res clientsBazBaz.SecondService_EchoDouble_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echodouble(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoEnumFunc is the handler function for "EchoEnum" method of thrift service "SecondService".
type SecondServiceEchoEnumFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoEnum_Args,
) (clientsBazBaz.Fruit, map[string]string, error)

// NewSecondServiceEchoEnumHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoEnumHandler(f SecondServiceEchoEnumFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoEnumHandler{f}
}

// SecondServiceEchoEnumHandler handles the "EchoEnum" method call of thrift service "SecondService".
type SecondServiceEchoEnumHandler struct {
	echoenum SecondServiceEchoEnumFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoEnumHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoEnum_Args
	var res clientsBazBaz.SecondService_EchoEnum_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoenum(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoI16Func is the handler function for "EchoI16" method of thrift service "SecondService".
type SecondServiceEchoI16Func func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoI16_Args,
) (int16, map[string]string, error)

// NewSecondServiceEchoI16Handler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoI16Handler(f SecondServiceEchoI16Func) zanzibar.TChannelHandler {
	return &SecondServiceEchoI16Handler{f}
}

// SecondServiceEchoI16Handler handles the "EchoI16" method call of thrift service "SecondService".
type SecondServiceEchoI16Handler struct {
	echoi16 SecondServiceEchoI16Func
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoI16Handler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoI16_Args
	var res clientsBazBaz.SecondService_EchoI16_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoi16(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoI32Func is the handler function for "EchoI32" method of thrift service "SecondService".
type SecondServiceEchoI32Func func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoI32_Args,
) (int32, map[string]string, error)

// NewSecondServiceEchoI32Handler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoI32Handler(f SecondServiceEchoI32Func) zanzibar.TChannelHandler {
	return &SecondServiceEchoI32Handler{f}
}

// SecondServiceEchoI32Handler handles the "EchoI32" method call of thrift service "SecondService".
type SecondServiceEchoI32Handler struct {
	echoi32 SecondServiceEchoI32Func
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoI32Handler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoI32_Args
	var res clientsBazBaz.SecondService_EchoI32_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoi32(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoI64Func is the handler function for "EchoI64" method of thrift service "SecondService".
type SecondServiceEchoI64Func func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoI64_Args,
) (int64, map[string]string, error)

// NewSecondServiceEchoI64Handler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoI64Handler(f SecondServiceEchoI64Func) zanzibar.TChannelHandler {
	return &SecondServiceEchoI64Handler{f}
}

// SecondServiceEchoI64Handler handles the "EchoI64" method call of thrift service "SecondService".
type SecondServiceEchoI64Handler struct {
	echoi64 SecondServiceEchoI64Func
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoI64Handler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoI64_Args
	var res clientsBazBaz.SecondService_EchoI64_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoi64(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoI8Func is the handler function for "EchoI8" method of thrift service "SecondService".
type SecondServiceEchoI8Func func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoI8_Args,
) (int8, map[string]string, error)

// NewSecondServiceEchoI8Handler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoI8Handler(f SecondServiceEchoI8Func) zanzibar.TChannelHandler {
	return &SecondServiceEchoI8Handler{f}
}

// SecondServiceEchoI8Handler handles the "EchoI8" method call of thrift service "SecondService".
type SecondServiceEchoI8Handler struct {
	echoi8 SecondServiceEchoI8Func
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoI8Handler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoI8_Args
	var res clientsBazBaz.SecondService_EchoI8_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoi8(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoListFunc is the handler function for "EchoList" method of thrift service "SecondService".
type SecondServiceEchoListFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoList_Args,
) ([]string, map[string]string, error)

// NewSecondServiceEchoListHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoListHandler(f SecondServiceEchoListFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoListHandler{f}
}

// SecondServiceEchoListHandler handles the "EchoList" method call of thrift service "SecondService".
type SecondServiceEchoListHandler struct {
	echolist SecondServiceEchoListFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoListHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoList_Args
	var res clientsBazBaz.SecondService_EchoList_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echolist(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoMapFunc is the handler function for "EchoMap" method of thrift service "SecondService".
type SecondServiceEchoMapFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoMap_Args,
) (map[clientsBazBase.UUID]*clientsBazBase.BazResponse, map[string]string, error)

// NewSecondServiceEchoMapHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoMapHandler(f SecondServiceEchoMapFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoMapHandler{f}
}

// SecondServiceEchoMapHandler handles the "EchoMap" method call of thrift service "SecondService".
type SecondServiceEchoMapHandler struct {
	echomap SecondServiceEchoMapFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoMapHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoMap_Args
	var res clientsBazBaz.SecondService_EchoMap_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echomap(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoSetFunc is the handler function for "EchoSet" method of thrift service "SecondService".
type SecondServiceEchoSetFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoSet_Args,
) (map[string]struct{}, map[string]string, error)

// NewSecondServiceEchoSetHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoSetHandler(f SecondServiceEchoSetFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoSetHandler{f}
}

// SecondServiceEchoSetHandler handles the "EchoSet" method call of thrift service "SecondService".
type SecondServiceEchoSetHandler struct {
	echoset SecondServiceEchoSetFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoSetHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoSet_Args
	var res clientsBazBaz.SecondService_EchoSet_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echoset(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoStringFunc is the handler function for "EchoString" method of thrift service "SecondService".
type SecondServiceEchoStringFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoString_Args,
) (string, map[string]string, error)

// NewSecondServiceEchoStringHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoStringHandler(f SecondServiceEchoStringFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoStringHandler{f}
}

// SecondServiceEchoStringHandler handles the "EchoString" method call of thrift service "SecondService".
type SecondServiceEchoStringHandler struct {
	echostring SecondServiceEchoStringFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoStringHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoString_Args
	var res clientsBazBaz.SecondService_EchoString_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echostring(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoUUIDFunc is the handler function for "EchoUUID" method of thrift service "SecondService".
type SecondServiceEchoUUIDFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoUUID_Args,
) (clientsBazBase.UUID, map[string]string, error)

// NewSecondServiceEchoUUIDHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoUUIDHandler(f SecondServiceEchoUUIDFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoUUIDHandler{f}
}

// SecondServiceEchoUUIDHandler handles the "EchoUUID" method call of thrift service "SecondService".
type SecondServiceEchoUUIDHandler struct {
	echouuid SecondServiceEchoUUIDFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoUUIDHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoUUID_Args
	var res clientsBazBaz.SecondService_EchoUUID_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echouuid(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = &r

	return err == nil, &res, respHeaders, nil
}

// SecondServiceEchoUUIDListFunc is the handler function for "EchoUUIDList" method of thrift service "SecondService".
type SecondServiceEchoUUIDListFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_EchoUUIDList_Args,
) ([]clientsBazBase.UUID, map[string]string, error)

// NewSecondServiceEchoUUIDListHandler wraps a handler function so it can be registered with a thrift server.
func NewSecondServiceEchoUUIDListHandler(f SecondServiceEchoUUIDListFunc) zanzibar.TChannelHandler {
	return &SecondServiceEchoUUIDListHandler{f}
}

// SecondServiceEchoUUIDListHandler handles the "EchoUUIDList" method call of thrift service "SecondService".
type SecondServiceEchoUUIDListHandler struct {
	echouuidlist SecondServiceEchoUUIDListFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SecondServiceEchoUUIDListHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SecondService_EchoUUIDList_Args
	var res clientsBazBaz.SecondService_EchoUUIDList_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.echouuidlist(ctx, reqHeaders, &req)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SimpleServiceCallFunc is the handler function for "Call" method of thrift service "SimpleService".
type SimpleServiceCallFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SimpleService_Call_Args,
) (map[string]string, error)

// NewSimpleServiceCallHandler wraps a handler function so it can be registered with a thrift server.
func NewSimpleServiceCallHandler(f SimpleServiceCallFunc) zanzibar.TChannelHandler {
	return &SimpleServiceCallHandler{f}
}

// SimpleServiceCallHandler handles the "Call" method call of thrift service "SimpleService".
type SimpleServiceCallHandler struct {
	call SimpleServiceCallFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SimpleServiceCallHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Call_Args
	var res clientsBazBaz.SimpleService_Call_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	respHeaders, err := h.call(ctx, reqHeaders, &req)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for Call returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		default:
			return false, nil, nil, err
		}
	}

	return err == nil, &res, respHeaders, nil
}

// SimpleServiceCompareFunc is the handler function for "Compare" method of thrift service "SimpleService".
type SimpleServiceCompareFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SimpleService_Compare_Args,
) (*clientsBazBase.BazResponse, map[string]string, error)

// NewSimpleServiceCompareHandler wraps a handler function so it can be registered with a thrift server.
func NewSimpleServiceCompareHandler(f SimpleServiceCompareFunc) zanzibar.TChannelHandler {
	return &SimpleServiceCompareHandler{f}
}

// SimpleServiceCompareHandler handles the "Compare" method call of thrift service "SimpleService".
type SimpleServiceCompareHandler struct {
	compare SimpleServiceCompareFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SimpleServiceCompareHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Compare_Args
	var res clientsBazBaz.SimpleService_Compare_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.compare(ctx, reqHeaders, &req)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for Compare returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		case *clientsBazBaz.OtherAuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for Compare returned non-nil error type *OtherAuthErr but nil value",
				)
			}
			res.OtherAuthErr = v
		default:
			return false, nil, nil, err
		}
	} else {
		res.Success = r
	}

	return err == nil, &res, respHeaders, nil
}

// SimpleServicePingFunc is the handler function for "Ping" method of thrift service "SimpleService".
type SimpleServicePingFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
) (*clientsBazBase.BazResponse, map[string]string, error)

// NewSimpleServicePingHandler wraps a handler function so it can be registered with a thrift server.
func NewSimpleServicePingHandler(f SimpleServicePingFunc) zanzibar.TChannelHandler {
	return &SimpleServicePingHandler{f}
}

// SimpleServicePingHandler handles the "Ping" method call of thrift service "SimpleService".
type SimpleServicePingHandler struct {
	ping SimpleServicePingFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SimpleServicePingHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_Ping_Args
	var res clientsBazBaz.SimpleService_Ping_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	r, respHeaders, err := h.ping(ctx, reqHeaders)

	if err != nil {
		return false, nil, nil, err
	}
	res.Success = r

	return err == nil, &res, respHeaders, nil
}

// SimpleServiceSillyNoopFunc is the handler function for "SillyNoop" method of thrift service "SimpleService".
type SimpleServiceSillyNoopFunc func(
	ctx context.Context,
	reqHeaders map[string]string,
) (map[string]string, error)

// NewSimpleServiceSillyNoopHandler wraps a handler function so it can be registered with a thrift server.
func NewSimpleServiceSillyNoopHandler(f SimpleServiceSillyNoopFunc) zanzibar.TChannelHandler {
	return &SimpleServiceSillyNoopHandler{f}
}

// SimpleServiceSillyNoopHandler handles the "SillyNoop" method call of thrift service "SimpleService".
type SimpleServiceSillyNoopHandler struct {
	sillynoop SimpleServiceSillyNoopFunc
}

// Handle parses request from wire value and calls corresponding handler function.
func (h *SimpleServiceSillyNoopHandler) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	var req clientsBazBaz.SimpleService_SillyNoop_Args
	var res clientsBazBaz.SimpleService_SillyNoop_Result

	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	respHeaders, err := h.sillynoop(ctx, reqHeaders)

	if err != nil {
		switch v := err.(type) {
		case *clientsBazBaz.AuthErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for SillyNoop returned non-nil error type *AuthErr but nil value",
				)
			}
			res.AuthErr = v
		case *clientsBazBase.ServerErr:
			if v == nil {
				return false, nil, nil, errors.New(
					"Handler for SillyNoop returned non-nil error type *ServerErr but nil value",
				)
			}
			res.ServerErr = v
		default:
			return false, nil, nil, err
		}
	}

	return err == nil, &res, respHeaders, nil
}
