// Code generated by mockery v1.0.0
package bazClient

import base "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/base"
import baz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
import context "context"
import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) Call(ctx context.Context, reqHeaders map[string]string, args *baz.SimpleService_Call_Args) (map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SimpleService_Call_Args) map[string]string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SimpleService_Call_Args) error); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Compare provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) Compare(ctx context.Context, reqHeaders map[string]string, args *baz.SimpleService_Compare_Args) (*base.BazResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *base.BazResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SimpleService_Compare_Args) *base.BazResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.BazResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SimpleService_Compare_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SimpleService_Compare_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeliberateDiffNoop provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) DeliberateDiffNoop(ctx context.Context, reqHeaders map[string]string) (map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) map[string]string); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoBinary provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoBinary(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoBinary_Args) ([]byte, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoBinary_Args) []byte); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoBinary_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoBinary_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoBool provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoBool(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoBool_Args) (bool, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoBool_Args) bool); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoBool_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoBool_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoDouble provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoDouble(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoDouble_Args) (float64, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoDouble_Args) float64); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoDouble_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoDouble_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoEnum provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoEnum(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoEnum_Args) (baz.Fruit, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 baz.Fruit
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoEnum_Args) baz.Fruit); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(baz.Fruit)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoEnum_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoEnum_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI16 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI16(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoI16_Args) (int16, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int16
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoI16_Args) int16); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int16)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoI16_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoI16_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI32 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI32(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoI32_Args) (int32, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoI32_Args) int32); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoI32_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoI32_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI64 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI64(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoI64_Args) (int64, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoI64_Args) int64); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoI64_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoI64_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI8 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI8(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoI8_Args) (int8, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int8
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoI8_Args) int8); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int8)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoI8_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoI8_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoString provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoString(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoString_Args) (string, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoString_Args) string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoString_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoString_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringList provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringList(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStringList_Args) ([]string, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStringList_Args) []string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStringList_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStringList_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringMap provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringMap(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStringMap_Args) (map[string]*base.BazResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]*base.BazResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStringMap_Args) map[string]*base.BazResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*base.BazResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStringMap_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStringMap_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringSet provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringSet(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStringSet_Args) (map[string]struct{}, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStringSet_Args) map[string]struct{}); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStringSet_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStringSet_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructList provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructList(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStructList_Args) ([]*base.BazResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []*base.BazResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStructList_Args) []*base.BazResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*base.BazResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStructList_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStructList_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructMap provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructMap(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStructMap_Args) ([]struct {
	Key   *base.BazResponse
	Value string
}, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []struct {
		Key   *base.BazResponse
		Value string
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStructMap_Args) []struct {
		Key   *base.BazResponse
		Value string
	}); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]struct {
				Key   *base.BazResponse
				Value string
			})
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStructMap_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStructMap_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructSet provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructSet(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoStructSet_Args) ([]*base.BazResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []*base.BazResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoStructSet_Args) []*base.BazResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*base.BazResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoStructSet_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoStructSet_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoTypedef provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoTypedef(ctx context.Context, reqHeaders map[string]string, args *baz.SecondService_EchoTypedef_Args) (base.UUID, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 base.UUID
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SecondService_EchoTypedef_Args) base.UUID); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(base.UUID)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SecondService_EchoTypedef_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SecondService_EchoTypedef_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Ping provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) Ping(ctx context.Context, reqHeaders map[string]string) (*base.BazResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 *base.BazResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *base.BazResponse); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.BazResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) map[string]string); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string) error); ok {
		r2 = rf(ctx, reqHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TestUUID provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) TestUUID(ctx context.Context, reqHeaders map[string]string) (map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) map[string]string); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trans provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) Trans(ctx context.Context, reqHeaders map[string]string, args *baz.SimpleService_Trans_Args) (*base.TransStruct, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *base.TransStruct
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *baz.SimpleService_Trans_Args) *base.TransStruct); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*base.TransStruct)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *baz.SimpleService_Trans_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *baz.SimpleService_Trans_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// URLTest provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) URLTest(ctx context.Context, reqHeaders map[string]string) (map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) map[string]string); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
