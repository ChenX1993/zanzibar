// Code generated by zanzibar
// @generated

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package bazClient is generated code used to make or handle TChannel calls using Thrift.
package bazClient

import (
	"context"
	"errors"
	"strconv"
	"time"

	"github.com/uber/tchannel-go"
	"github.com/uber/zanzibar/runtime"

	clientsBazBase "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/base"
	clientsBazBaz "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/baz/baz"
)

// Client defines baz client interface.
type Client interface {
	Echo(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBazBaz.SecondService_Echo_Args,
	) (string, map[string]string, error)
	Call(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBazBaz.SimpleService_Call_Args,
	) (map[string]string, error)
	Compare(
		ctx context.Context,
		reqHeaders map[string]string,
		args *clientsBazBaz.SimpleService_Compare_Args,
	) (*clientsBazBase.BazResponse, map[string]string, error)
	Ping(
		ctx context.Context,
		reqHeaders map[string]string,
	) (*clientsBazBase.BazResponse, map[string]string, error)
	DeliberateDiffNoop(
		ctx context.Context,
		reqHeaders map[string]string,
	) (map[string]string, error)
}

// NewClient returns a new TChannel client for service baz.
func NewClient(gateway *zanzibar.Gateway) Client {
	serviceName := gateway.Config.MustGetString("clients.baz.serviceName")
	sc := gateway.Channel.GetSubChannel(serviceName, tchannel.Isolated)

	ip := gateway.Config.MustGetString("clients.baz.ip")
	port := gateway.Config.MustGetInt("clients.baz.port")
	sc.Peers().Add(ip + ":" + strconv.Itoa(int(port)))

	timeout := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.baz.timeout"),
	)
	timeoutPerAttempt := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.baz.timeoutPerAttempt"),
	)

	client := zanzibar.NewTChannelClient(gateway.Channel,
		&zanzibar.TChannelClientOption{
			ServiceName:       serviceName,
			Timeout:           timeout,
			TimeoutPerAttempt: timeoutPerAttempt,
		},
	)

	return &bazClient{
		client: client,
	}
}

// bazClient is the TChannel client for downstream service.
type bazClient struct {
	client zanzibar.TChannelClient
}

// Echo is a client RPC call for method "SecondService::Echo"
func (c *bazClient) Echo(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SecondService_Echo_Args,
) (string, map[string]string, error) {
	var result clientsBazBaz.SecondService_Echo_Result
	var resp string

	success, respHeaders, err := c.client.Call(
		ctx, "SecondService", "Echo", reqHeaders, args, &result,
	)

	if err == nil && !success {
		switch {
		default:
			err = errors.New("bazClient received no result or unknown exception for Echo")
		}
	}
	if err != nil {
		return resp, nil, err
	}

	resp, err = clientsBazBaz.SecondService_Echo_Helper.UnwrapResponse(&result)
	return resp, respHeaders, err
}

// Call is a client RPC call for method "SimpleService::Call"
func (c *bazClient) Call(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SimpleService_Call_Args,
) (map[string]string, error) {
	var result clientsBazBaz.SimpleService_Call_Result

	success, respHeaders, err := c.client.Call(
		ctx, "SimpleService", "Call", reqHeaders, args, &result,
	)

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		default:
			err = errors.New("bazClient received no result or unknown exception for Call")
		}
	}
	if err != nil {
		return nil, err
	}

	return respHeaders, err
}

// Compare is a client RPC call for method "SimpleService::Compare"
func (c *bazClient) Compare(
	ctx context.Context,
	reqHeaders map[string]string,
	args *clientsBazBaz.SimpleService_Compare_Args,
) (*clientsBazBase.BazResponse, map[string]string, error) {
	var result clientsBazBaz.SimpleService_Compare_Result
	var resp *clientsBazBase.BazResponse

	success, respHeaders, err := c.client.Call(
		ctx, "SimpleService", "Compare", reqHeaders, args, &result,
	)

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.OtherAuthErr != nil:
			err = result.OtherAuthErr
		default:
			err = errors.New("bazClient received no result or unknown exception for Compare")
		}
	}
	if err != nil {
		return resp, nil, err
	}

	resp, err = clientsBazBaz.SimpleService_Compare_Helper.UnwrapResponse(&result)
	return resp, respHeaders, err
}

// Ping is a client RPC call for method "SimpleService::Ping"
func (c *bazClient) Ping(
	ctx context.Context,
	reqHeaders map[string]string,
) (*clientsBazBase.BazResponse, map[string]string, error) {
	var result clientsBazBaz.SimpleService_Ping_Result
	var resp *clientsBazBase.BazResponse

	args := &clientsBazBaz.SimpleService_Ping_Args{}
	success, respHeaders, err := c.client.Call(
		ctx, "SimpleService", "Ping", reqHeaders, args, &result,
	)

	if err == nil && !success {
		switch {
		default:
			err = errors.New("bazClient received no result or unknown exception for Ping")
		}
	}
	if err != nil {
		return resp, nil, err
	}

	resp, err = clientsBazBaz.SimpleService_Ping_Helper.UnwrapResponse(&result)
	return resp, respHeaders, err
}

// DeliberateDiffNoop is a client RPC call for method "SimpleService::SillyNoop"
func (c *bazClient) DeliberateDiffNoop(
	ctx context.Context,
	reqHeaders map[string]string,
) (map[string]string, error) {
	var result clientsBazBaz.SimpleService_SillyNoop_Result

	args := &clientsBazBaz.SimpleService_SillyNoop_Args{}
	success, respHeaders, err := c.client.Call(
		ctx, "SimpleService", "SillyNoop", reqHeaders, args, &result,
	)

	if err == nil && !success {
		switch {
		case result.AuthErr != nil:
			err = result.AuthErr
		case result.ServerErr != nil:
			err = result.ServerErr
		default:
			err = errors.New("bazClient received no result or unknown exception for SillyNoop")
		}
	}
	if err != nil {
		return nil, err
	}

	return respHeaders, err
}
