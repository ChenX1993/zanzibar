// Code generated by mockery v1.0.0

// +build mock

package barClient

import bar "github.com/uber/zanzibar/examples/example-gateway/build/gen-code/clients/bar/bar"
import context "context"
import mock "github.com/stretchr/testify/mock"
import zanzibar "github.com/uber/zanzibar/runtime"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// ArgNotStruct provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgNotStruct(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgNotStruct_Args) (map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgNotStruct_Args) map[string]string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgNotStruct_Args) error); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArgWithHeaders provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithHeaders(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithHeaders_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithHeaders_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithHeaders_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithHeaders_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArgWithManyQueryParams provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithManyQueryParams(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithManyQueryParams_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithManyQueryParams_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithManyQueryParams_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithManyQueryParams_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArgWithNestedQueryParams provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithNestedQueryParams(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithNestedQueryParams_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithNestedQueryParams_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithNestedQueryParams_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithNestedQueryParams_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArgWithParams provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithParams(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithParams_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithParams_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithParams_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithParams_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArgWithQueryHeader provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithQueryHeader(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithQueryHeader_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryHeader_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryHeader_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryHeader_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ArgWithQueryParams provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) ArgWithQueryParams(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_ArgWithQueryParams_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryParams_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryParams_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_ArgWithQueryParams_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoBinary provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoBinary(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoBinary_Args) ([]byte, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoBinary_Args) []byte); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoBinary_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoBinary_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoBool provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoBool(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoBool_Args) (bool, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoBool_Args) bool); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoBool_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoBool_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoDouble provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoDouble(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoDouble_Args) (float64, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoDouble_Args) float64); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoDouble_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoDouble_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoEnum provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoEnum(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoEnum_Args) (bar.Fruit, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 bar.Fruit
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoEnum_Args) bar.Fruit); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(bar.Fruit)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoEnum_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoEnum_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI16 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI16(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoI16_Args) (int16, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int16
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoI16_Args) int16); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int16)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoI16_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoI16_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI32 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI32(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoI32_Args) (int32, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoI32_Args) int32); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoI32_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoI32_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI32Map provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI32Map(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoI32Map_Args) (map[int32]*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[int32]*bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoI32Map_Args) map[int32]*bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int32]*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoI32Map_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoI32Map_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI64 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI64(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoI64_Args) (int64, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoI64_Args) int64); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoI64_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoI64_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoI8 provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoI8(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoI8_Args) (int8, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 int8
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoI8_Args) int8); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(int8)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoI8_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoI8_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoString provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoString(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoString_Args) (string, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoString_Args) string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoString_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoString_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringList provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringList(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStringList_Args) ([]string, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStringList_Args) []string); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStringList_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStringList_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringMap provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringMap(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStringMap_Args) (map[string]*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]*bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStringMap_Args) map[string]*bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStringMap_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStringMap_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStringSet provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStringSet(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStringSet_Args) (map[string]struct{}, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStringSet_Args) map[string]struct{}); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStringSet_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStringSet_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructList provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructList(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStructList_Args) ([]*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []*bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStructList_Args) []*bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStructList_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStructList_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructMap provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructMap(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStructMap_Args) ([]struct {
	Key   *bar.BarResponse
	Value string
}, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []struct {
		Key   *bar.BarResponse
		Value string
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStructMap_Args) []struct {
		Key   *bar.BarResponse
		Value string
	}); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]struct {
				Key   *bar.BarResponse
				Value string
			})
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStructMap_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStructMap_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoStructSet provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoStructSet(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoStructSet_Args) ([]*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 []*bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoStructSet_Args) []*bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoStructSet_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoStructSet_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EchoTypedef provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) EchoTypedef(ctx context.Context, reqHeaders map[string]string, args *bar.Echo_EchoTypedef_Args) (bar.UUID, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 bar.UUID
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Echo_EchoTypedef_Args) bar.UUID); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		r0 = ret.Get(0).(bar.UUID)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Echo_EchoTypedef_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Echo_EchoTypedef_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HTTPClient provides a mock function with given fields:
func (_m *MockClient) HTTPClient() *zanzibar.HTTPClient {
	ret := _m.Called()

	var r0 *zanzibar.HTTPClient
	if rf, ok := ret.Get(0).(func() *zanzibar.HTTPClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zanzibar.HTTPClient)
		}
	}

	return r0
}

// Hello provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) Hello(ctx context.Context, reqHeaders map[string]string) (string, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) string); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) map[string]string); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string) error); ok {
		r2 = rf(ctx, reqHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MissingArg provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) MissingArg(ctx context.Context, reqHeaders map[string]string) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) map[string]string); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string) error); ok {
		r2 = rf(ctx, reqHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NoRequest provides a mock function with given fields: ctx, reqHeaders
func (_m *MockClient) NoRequest(ctx context.Context, reqHeaders map[string]string) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) map[string]string); ok {
		r1 = rf(ctx, reqHeaders)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string) error); ok {
		r2 = rf(ctx, reqHeaders)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Normal provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) Normal(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_Normal_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_Normal_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_Normal_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_Normal_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NormalRecur provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) NormalRecur(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_NormalRecur_Args) (*bar.BarResponseRecur, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponseRecur
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_NormalRecur_Args) *bar.BarResponseRecur); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponseRecur)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_NormalRecur_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_NormalRecur_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TooManyArgs provides a mock function with given fields: ctx, reqHeaders, args
func (_m *MockClient) TooManyArgs(ctx context.Context, reqHeaders map[string]string, args *bar.Bar_TooManyArgs_Args) (*bar.BarResponse, map[string]string, error) {
	ret := _m.Called(ctx, reqHeaders, args)

	var r0 *bar.BarResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *bar.Bar_TooManyArgs_Args) *bar.BarResponse); ok {
		r0 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bar.BarResponse)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, *bar.Bar_TooManyArgs_Args) map[string]string); ok {
		r1 = rf(ctx, reqHeaders, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]string, *bar.Bar_TooManyArgs_Args) error); ok {
		r2 = rf(ctx, reqHeaders, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
