// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/zanzibar/examples/selective-gateway/build/clients/mirror (interfaces: Client)

// Package clientmock is a generated GoMock package.
package clientmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mirror "github.com/uber/zanzibar/examples/selective-gateway/build/gen-code/clients/mirror"
	yarpc "go.uber.org/yarpc"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Mirror mocks base method
func (m *MockClient) Mirror(arg0 context.Context, arg1 *mirror.Request, arg2 ...yarpc.CallOption) (*mirror.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mirror", varargs...)
	ret0, _ := ret[0].(*mirror.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mirror indicates an expected call of Mirror
func (mr *MockClientMockRecorder) Mirror(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mirror", reflect.TypeOf((*MockClient)(nil).Mirror), varargs...)
}
