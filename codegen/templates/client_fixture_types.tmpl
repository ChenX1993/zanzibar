{{- /* template to render client fixture type code */ -}}
{{- $instance := .Instance }}
{{- $scenariosMap := .Fixture.Scenarios }}
package clientmock

import (
	"context"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{- $clientID := .ClientID -}}
{{$exposedMethods := .ExposedMethods}}

// ClientFixture defines the client fixture type for {{$clientID}}
type ClientFixture struct {
{{- range $svc := .Services -}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{- if (index $scenariosMap $methodName) -}}
{{$methodName}} *{{$methodName}}Scenarios
{{- end -}}
{{- end -}}
{{- end -}}
}

{{range $methodName, $scenarios := $scenariosMap -}}
{{$methodName := pascal $methodName -}}
// {{$methodName}}Scenarios defines all fixture scenarios for {{$methodName}}
type {{$methodName}}Scenarios struct {
{{range $scenario := $scenarios -}}
{{pascal $scenario}} *{{$methodName}}Fixture `scenario:"{{$scenario}}"`
{{end -}}
}
{{end -}}

{{- range $svc := .Services -}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{- if (index $scenariosMap $methodName) -}}
// {{$methodName}}Fixture defines the fixture type for {{$methodName}}
type {{$methodName}}Fixture struct {
	Arg0 context.Context
	Arg1 map[string]string
	{{if ne .RequestType "" -}}
	Arg2 {{.RequestType}}
	{{end}}

	// Arg{n}Any indicates the nth argument could be gomock.Any
	Arg0Any bool
	Arg1Any bool
	{{if ne .RequestType "" -}}
	Arg2Any bool
	{{end}}

	{{if ne .ResponseType "" -}}
	Ret0 {{.ResponseType}}
	Ret1 map[string]string
	Ret2 error
	{{else -}}
	Ret0 map[string]string
	Ret1 error
	{{end -}}
}
{{- end -}}
{{- end -}}
{{- end -}}
