{{$instance := .Instance -}}
{{$clientsWithFixture := .ClientsWithFixture -}}
{{$leafClass := index $instance.DependencyOrder 0 -}}
{{$typeName := printf "Mock%sNodes" (title $leafClass) -}}
{{$mockDeps := index $instance.RecursiveDependencies $leafClass -}}
package mock{{lower (camel $instance.InstanceName)}}workflow

import (
	{{range $idx, $moduleInstance := $mockDeps -}}
	{{$moduleInstance.PackageInfo.GeneratedPackageAlias}} "{{$moduleInstance.PackageInfo.GeneratedPackagePath}}/mock-{{$leafClass}}"
	{{end}}
)

// {{$typeName}} contains mock {{$leafClass}} dependencies for the {{$instance.InstanceName}} {{$instance.ClassName}} module
type {{$typeName}} struct {
	{{range $idx, $moduleInstance := $mockDeps -}}
	{{- $pkgInfo := $moduleInstance.PackageInfo }}
	{{- if (index $clientsWithFixture $moduleInstance.InstanceName) }}
	{{$pkgInfo.QualifiedInstanceName}} *{{$pkgInfo.GeneratedPackageAlias}}.Mock{{$pkgInfo.ExportType}}WithFixture
	{{- else }}
	{{$pkgInfo.QualifiedInstanceName}} *{{$pkgInfo.GeneratedPackageAlias}}.Mock{{$pkgInfo.ExportType}}
	{{- end }}
	{{- end }}
}
