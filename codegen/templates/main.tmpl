{{- /* template to render gateway main.go */ -}}
{{- $instance := . -}}

package main

import (
	"os"
	"path/filepath"
	"runtime"

	"go.uber.org/zap"
	"github.com/uber/zanzibar/runtime"

	module "{{$instance.PackageInfo.ModulePackagePath}}"
)

func getDirName() string {
	_, file, _, _ := runtime.Caller(0)
	return zanzibar.GetDirnameFromRuntimeCaller(file)
}

// TODO: remove this
func getConfigDirName() string {
	return filepath.Join(
		getDirName(),
		"../../../",
		"config",
	)
}

func getConfig() *zanzibar.StaticConfig {
	return zanzibar.NewStaticConfigOrDie([]string{
		// TODO: zanzibar-defaults should be bundled in the binary
		filepath.Join(getDirName(), "zanzibar-defaults.json"),
		filepath.Join(getConfigDirName(), "production.json"),
		filepath.Join(os.Getenv("CONFIG_DIR"), "production.json"),
	}, nil)
}

func createGateway() (*zanzibar.Gateway, error) {
	config := getConfig()
	
	gateway, err := zanzibar.CreateGateway(config, nil)
	if err != nil {
		return nil, err
	}

	dependencies := module.InitializeDependencies(gateway)
	registerEndpoints(gateway, dependencies)

	return gateway, nil
}

func registerEndpoints(g *zanzibar.Gateway, deps *module.Dependencies) {
	{{- range $idx, $endpoint := (index $instance.ResolvedDependencies "endpoint") }}
	deps.Endpoint.{{$endpoint.PackageInfo.QualifiedInstanceName}}.Register(g)
	{{- end}}
}

func logAndWait(server *zanzibar.Gateway) {
	server.Logger.Info("Started {{$instance.InstanceName | pascal}} gateway",
		zap.String("realHTTPAddr", server.RealHTTPAddr),
		zap.String("realTChannelAddr", server.RealTChannelAddr),
		zap.Any("config", server.InspectOrDie()),
	)

	// TODO: handle sigterm gracefully
	server.Wait()
	// TODO: emit metrics about startup.
	// TODO: setup and configure tracing/jeager.
}

func main() {
	server, err := createGateway()
	if err != nil {
		panic(err)
	}

	err = server.Bootstrap()
	if err != nil {
		panic(err)
	}

	logAndWait(server)
}
