{{- /* template to render edge gateway tchannel client code */ -}}
{{- $instance := .Instance }}
package {{$instance.PackageInfo.PackageName}}

import (
	"context"
	"errors"
	"github.com/afex/hystrix-go/hystrix"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"

	zanzibar "github.com/uber/zanzibar/runtime"
	tchannel "github.com/uber/tchannel-go"

	module "{{$instance.PackageInfo.ModulePackagePath}}"
	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{$clientID := .ClientID -}}
{{$exposedMethods := .ExposedMethods -}}
{{- $clientName := printf "%sClient" (camel $clientID) }}
{{- $exportName := .ExportName}}
{{- $sidecarRouter := .SidecarRouter}}
{{- $stagingReqHeader := .StagingReqHeader}}

// Client defines {{$clientID}} client interface.
type Client interface {
{{range $svc := .Services -}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{- if $methodName -}}
	{{$methodName}}(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if ne .RequestType "" -}}
		args {{.RequestType}},
		{{end -}}
	) ({{- if ne .ResponseType "" -}} {{.ResponseType}}, {{- end -}}map[string]string, error)
{{- end -}}
{{- end -}}
{{- end -}}
}

// NewClient returns a new TChannel client for service {{$clientID}}.
func {{$exportName}}(deps *module.Dependencies) Client {
	{{- /* this is the service discovery service name */}}
	serviceName := deps.Default.Config.MustGetString("clients.{{$clientID}}.serviceName")
	var routingKey string
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.routingKey") {
		routingKey = deps.Default.Config.MustGetString("clients.{{$clientID}}.routingKey")
	}
	sc := deps.Default.Channel.GetSubChannel(serviceName, tchannel.Isolated)

	{{if $sidecarRouter -}}
	ip := deps.Default.Config.MustGetString("sidecarRouter.{{$sidecarRouter}}.tchannel.ip")
	port := deps.Default.Config.MustGetInt("sidecarRouter.{{$sidecarRouter}}.tchannel.port")
	{{else -}}
	ip := deps.Default.Config.MustGetString("clients.{{$clientID}}.ip")
	port := deps.Default.Config.MustGetInt("clients.{{$clientID}}.port")
	{{end -}}
	sc.Peers().Add(ip + ":" + strconv.Itoa(int(port)))

	var scAltName string
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.staging.serviceName") {
		scAltName = deps.Default.Config.MustGetString("clients.{{$clientID}}.staging.serviceName")
		ipAlt := deps.Default.Config.MustGetString("clients.{{$clientID}}.staging.ip")
		portAlt := deps.Default.Config.MustGetInt("clients.{{$clientID}}.staging.port")

		scAlt := deps.Default.Channel.GetSubChannel(scAltName, tchannel.Isolated)
		scAlt.Peers().Add(ipAlt + ":" + strconv.Itoa(int(portAlt)))
	} else if deps.Default.Config.ContainsKey("clients.staging.all.serviceName") {
		scAltName = deps.Default.Config.MustGetString("clients.staging.all.serviceName")
		ipAlt := deps.Default.Config.MustGetString("clients.staging.all.ip")
		portAlt := deps.Default.Config.MustGetInt("clients.staging.all.port")

		scAlt := deps.Default.Channel.GetSubChannel(scAltName, tchannel.Isolated)
		scAlt.Peers().Add(ipAlt + ":" + strconv.Itoa(int(portAlt)))
	}

	{{/* TODO: (lu) maybe set these at per method level */ -}}
	timeoutVal := int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.timeout"))
	timeout := time.Millisecond * time.Duration(
		timeoutVal,
	)
	timeoutPerAttempt := time.Millisecond * time.Duration(
		deps.Default.Config.MustGetInt("clients.{{$clientID}}.timeoutPerAttempt"),
	)

	methodNames := map[string]string{
		{{range $svc := .Services -}}
		{{range .Methods -}}
		{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
		{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
			{{if $methodName -}}
			"{{$serviceMethod}}": "{{$methodName}}",
			{{end -}}
		{{ end -}}
		{{ end -}}
	}

	circuitBreakerDisabled := configureCicruitBreaker(deps, timeoutVal)

	client := zanzibar.NewTChannelClientContext(
		deps.Default.Channel,
		deps.Default.Logger,
		deps.Default.ContextMetrics,
		&zanzibar.TChannelClientOption{
			ServiceName:       serviceName,
			ClientID:          "{{$clientID}}",
			MethodNames:       methodNames,
			Timeout:           timeout,
			TimeoutPerAttempt: timeoutPerAttempt,
			RoutingKey:        &routingKey,
			AltSubchannelName: scAltName,
		},
	)

	return &{{$clientName}}{
		client: client,
		circuitBreakerDisabled: circuitBreakerDisabled,
	}
}

func configureCicruitBreaker(deps *module.Dependencies, timeoutVal int) bool {
	// circuitBreakerDisabled sets whether circuit-breaker should be disabled
	circuitBreakerDisabled := false
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.circuitBreakerDisabled") {
		circuitBreakerDisabled = deps.Default.Config.MustGetBoolean("clients.{{$clientID}}.circuitBreakerDisabled")
	}
	// sleepWindowInMilliseconds sets the amount of time, after tripping the circuit,
	// to reject requests before allowing attempts again to determine if the circuit should again be closed
	sleepWindowInMilliseconds := 5000
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.sleepWindowInMilliseconds") {
		sleepWindowInMilliseconds = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.sleepWindowInMilliseconds"))
	}
	// maxConcurrentRequests sets how many requests can be run at the same time, beyond which requests are rejected
	maxConcurrentRequests := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.maxConcurrentRequests") {
		maxConcurrentRequests = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.maxConcurrentRequests"))
	}
	// errorPercentThreshold sets the error percentage at or above which the circuit should trip open
	errorPercentThreshold := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.errorPercentThreshold") {
		errorPercentThreshold = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.errorPercentThreshold"))
	}
	// requestVolumeThreshold sets a minimum number of requests that will trip the circuit in a rolling window of 10s
	// For example, if the value is 20, then if only 19 requests are received in the rolling window of 10 seconds
	// the circuit will not trip open even if all 19 failed.
	requestVolumeThreshold := 20
	if deps.Default.Config.ContainsKey("clients.{{$clientID}}.requestVolumeThreshold") {
		requestVolumeThreshold = int(deps.Default.Config.MustGetInt("clients.{{$clientID}}.requestVolumeThreshold"))
	}
	if !circuitBreakerDisabled {
		hystrix.ConfigureCommand("{{$clientID}}", hystrix.CommandConfig{
			MaxConcurrentRequests:  maxConcurrentRequests,
			ErrorPercentThreshold:  errorPercentThreshold,
			SleepWindow:            sleepWindowInMilliseconds,
			RequestVolumeThreshold: requestVolumeThreshold,
			Timeout:                timeoutVal,
		})
	}
	return circuitBreakerDisabled
}

// {{$clientName}} is the TChannel client for downstream service.
type {{$clientName}} struct {
	client *zanzibar.TChannelClient
	circuitBreakerDisabled bool
}

{{range $svc := .Services}}
{{range .Methods}}
{{$serviceMethod := printf "%s::%s" $svc.Name .Name -}}
{{$methodName := (title (index $exposedMethods $serviceMethod)) -}}
{{if $methodName -}}
	// {{$methodName}} is a client RPC call for method "{{$serviceMethod}}"
	func (c *{{$clientName}}) {{$methodName}}(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if ne .RequestType "" -}}
		args {{.RequestType}},
		{{end -}}
	) ({{- if ne .ResponseType "" -}} {{.ResponseType}}, {{- end -}}map[string]string, error) {
		var result {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Result
		{{if .ResponseType -}}
		var resp {{.ResponseType}}
		{{end}}
		logger := c.client.Loggers["{{$serviceMethod}}"]

		{{if eq .RequestType "" -}}
			args := &{{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Args{}
		{{end -}}

		caller := c.client.Call
		if strings.EqualFold(reqHeaders["{{$stagingReqHeader}}"], "true") {
			caller = c.client.CallThruAltChannel
		}

		var success bool
		var respHeaders map[string]string
		var err error
		if (c.circuitBreakerDisabled) {
			success, respHeaders, err = caller(
				ctx, "{{$svc.Name}}", "{{.Name}}", reqHeaders, args, &result,
			)
		} else {
			err = hystrix.DoC(ctx, "{{$clientID}}", func(ctx context.Context) error {
				success, respHeaders, err = caller(
					ctx, "{{$svc.Name}}", "{{.Name}}", reqHeaders, args, &result,
				)
				return err
			}, nil)
		}


		if err == nil && !success {
			switch {
				{{range .Exceptions -}}
				case result.{{title .Name}} != nil:
					err = result.{{title .Name}}
				{{end -}}
				default:
					err = errors.New("{{$clientName}} received no result or unknown exception for {{title .Name}}")
			}
		}
		if err != nil {
			logger.Warn("Client failure: TChannel client call returned error", zap.Error(err))
		{{if eq .ResponseType "" -}}
			return nil, err
		{{else -}}
			return resp, nil, err
		{{end -}}
		}

		{{if eq .ResponseType "" -}}
			return respHeaders, err
		{{else -}}
			resp, err = {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Helper.UnwrapResponse(&result)
			if err != nil {
				logger.Warn("Client failure: unable to unwrap client response", zap.Error(err))
			}
			return resp, respHeaders, err
		{{end -}}
	}
{{end -}}
{{end -}}
{{end}}
