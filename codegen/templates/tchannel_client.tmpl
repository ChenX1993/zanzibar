{{- /* template to render edge gateway tchannel client code */ -}}

// Package {{.PackageName}} is generated code used to make or handle TChannel calls using Thrift.
package {{.PackageName}}

import (
	"context"
	"errors"
	"strconv"
	"time"

	"github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
)

{{$clientID := .ClientID -}}
{{$clientName := title .ClientID | printf "%sClient" -}}
{{range $svc := .Services}}
// NewClient returns a new TChannel client for service {{$clientID}}.
func NewClient(gateway *zanzibar.Gateway) *{{$clientName}} {
	{{- /* this is the service discovery service name */}}
	serviceName := gateway.Config.MustGetString("clients.{{$clientID}}.serviceName")
	sc := gateway.Channel.GetSubChannel(serviceName)

	{{/* TODO: (lu) support multiple host port */ -}}
	ip := gateway.Config.MustGetString("clients.{{$clientID}}.ip")
	port := gateway.Config.MustGetInt("clients.{{$clientID}}.port")
	sc.Peers().Add(ip + ":" + strconv.Itoa(int(port)))

	{{/* TODO: (lu) maybe set these at per method level */ -}}
	timeout := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.{{$clientID}}.timeout"),
	)
	timeoutPerAttempt := time.Millisecond * time.Duration(
		gateway.Config.MustGetInt("clients.{{$clientID}}.timeoutPerAttempt"),
	)

	client := zanzibar.NewTChannelClient(gateway.Channel,
		&zanzibar.TChannelClientOption{
			ServiceName:       serviceName,
			Timeout:           timeout,
			TimeoutPerAttempt: timeoutPerAttempt,
		},
	)

	return &{{$clientName}}{
		{{- /* this is the thrift service name, different from service discovery service name */}}
		thriftService: "{{$svc.Name}}",
		client:        client,
	}
}

// {{$clientName}} is the TChannel client for downstream service.
type {{$clientName}} struct {
	thriftService string
	client        zanzibar.TChannelClient
}

{{range .Methods}}
	// {{.Name}} ...
	func (c *{{$clientName}}) {{.Name}}(
		ctx context.Context,
		reqHeaders map[string]string,
		{{if ne .RequestType "" -}}
		args {{.RequestType}},
		{{end -}}
	) ({{- if ne .ResponseType "" -}} {{.ResponseType}}, {{- end -}}map[string]string, error) {
		var result {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Result

		{{if eq .RequestType "" -}}
			args := &{{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Args{}
		{{end -}}
		success, respHeaders, err := c.client.Call(
			ctx, c.thriftService, "{{.Name}}", reqHeaders, args, &result,
		)

		if err == nil && !success {
			switch {
				{{range .Exceptions -}}
				case result.{{title .Name}} != nil:
					err = result.{{title .Name}}
				{{end -}}
				default:
					err = errors.New("{{$clientName}} received no result or unknown exception for {{title .Name}}")
			}
		}
		if err != nil {
		{{if eq .ResponseType "" -}}
			return nil, err
		{{else -}}
			return nil, nil, err
		{{end -}}
		}

		{{if eq .ResponseType "" -}}
			return respHeaders, err
		{{else -}}
			resp, err := {{.GenCodePkgName}}.{{title $svc.Name}}_{{title .Name}}_Helper.UnwrapResponse(&result)
			return resp, respHeaders, err
		{{end -}}
	}
{{end -}}
{{end}}
