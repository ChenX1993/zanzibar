// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package module

import (
	"os"
	"path"
	"path/filepath"
	"runtime"
	"testing"
)

type handler struct{}

var testHandler = handler{}
var staticHandler = handler{}
var variableHandler = handler{}
var splatHandler = handler{}

type HTTPClientGenerator struct{}

func (*HTTPClientGenerator) Generate(
	instance *Instance,
) (map[string][]byte, error) {
	return nil, nil
}

type TChannelClientGenerator struct{}

func (*TChannelClientGenerator) Generate(
	instance *Instance,
) (map[string][]byte, error) {
	return nil, nil
}

type HTTPEndpointGenerator struct{}

func (*HTTPEndpointGenerator) Generate(
	instance *Instance,
) (map[string][]byte, error) {
	return nil, nil
}

func TestExampleService(t *testing.T) {
	moduleSystem := NewSystem()
	var err error

	err = moduleSystem.RegisterClass("client", Class{
		ClassType: MultiModule,
		Directory: "clients",
	})
	if err != nil {
		t.Errorf("Unexpected error registering client class: %s", err)
	}

	err = moduleSystem.RegisterClassType(
		"client",
		"http",
		&HTTPClientGenerator{},
	)
	if err != nil {
		t.Errorf("Unexpected error registering http client class type: %s", err)
	}

	err = moduleSystem.RegisterClassType(
		"client",
		"tchannel",
		&TChannelClientGenerator{},
	)
	if err != nil {
		t.Errorf("Unexpected error registering tchannel client class type: %s", err)
	}

	err = moduleSystem.RegisterClass("endpoint", Class{
		ClassType:         MultiModule,
		ClassDependencies: []string{"client"},
		Directory:         "endpoints",
	})
	if err != nil {
		t.Errorf("Unexpected error registering endpoint class: %s", err)
	}

	err = moduleSystem.RegisterClassType(
		"endpoint",
		"http",
		&HTTPEndpointGenerator{},
	)
	if err != nil {
		t.Errorf("Unexpected error registering http client class type: %s", err)
	}

	err = moduleSystem.RegisterClassType(
		"endpoint",
		"http",
		&HTTPEndpointGenerator{},
	)
	if err == nil {
		t.Errorf("Expected double creation of http endpoint to error")
	}

	err = moduleSystem.RegisterClass("client", Class{
		ClassType: MultiModule,
		Directory: "clients",
	})
	if err == nil {
		t.Errorf("Expected double definition of client class to error")
	}

	err = moduleSystem.RegisterClass("newclient", Class{
		ClassType: MultiModule,
		Directory: "./clients/",
	})
	if err == nil {
		t.Errorf("Expected registering a module in the same directory to throw")
	}

	err = moduleSystem.RegisterClass("newclient", Class{
		ClassType: MultiModule,
		Directory: "./clients/../../../foo",
	})
	if err == nil {
		t.Errorf("Expected registering a module in an external directory to throw")
	}

	currentDir := getDirName()
	testServiceDir := path.Join(currentDir, "test-service")

	// TODO: this doesn't yet generate the build to a dir
	// TODO: this should return a collection of errors if they occur
	err = moduleSystem.GenerateBuild(
		"github.com/uber/zanzibar/module/test-service",
		testServiceDir,
		path.Join(testServiceDir, "build"),
	)
	if err != nil {
		t.Errorf("Unexpected error generating build %s", err)
	}
}

func getDirName() string {
	_, file, _, _ := runtime.Caller(0)
	dirname := filepath.Dir(file)
	// Strip _obj dirs generated by test -cover ...
	if filepath.Base(dirname) == "_obj" {
		dirname = filepath.Dir(dirname)
	}
	// if absolute then fini.
	if filepath.IsAbs(dirname) {
		return dirname
	}
	// If dirname is not absolute then its a package name...
	return filepath.Join(os.Getenv("GOPATH"), "src", dirname)
}
